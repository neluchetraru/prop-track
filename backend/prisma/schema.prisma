// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  password      String?
  name          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  properties    Property[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Property {
  id       String  @id @default(cuid())
  name     String
  notes    String?
  value    Float?
  currency String?

  // Address
  propertyLocation   PropertyLocation? @relation(fields: [propertyLocationId], references: [id])
  propertyLocationId String?           @unique

  // Property Type
  type PropertyType @default(APARTMENT)

  // User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Images
  images Image[]

  // Documents
  documents PropertyDocument[]

  // Tenants
  tenants Tenant[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("property")
}

model PropertyLocation {
  id         String    @id @default(cuid())
  address    String
  city       String
  country    String
  postalCode String
  latitude   Float?
  longitude  Float?
  Property   Property?

  @@map("property_location")
}

model Tenant {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Tenant Status
  status TenantStatus @default(ACTIVE)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tenant")
}

enum TenantStatus {
  ACTIVE
  INACTIVE
}

model PropertyDocument {
  id         String               @id @default(cuid())
  url        String
  propertyId String
  type       PropertyDocumentType
  property   Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

enum PropertyDocumentType {
  PERSONAL
  PROPERTY_REGISTRATION
  PROPERTY_UTILITY
  OTHER
}

enum PropertyType {
  HOUSE
  APARTMENT
  VILLA
  COMMERCIAL
}

model Image {
  id         String   @id @default(cuid())
  url        String
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}
